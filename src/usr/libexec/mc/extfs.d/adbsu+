#!/bin/bash
#
#  Midnight Commander compatible EXTFS for accessing Android devices over adb
#
#  Writen by Volodymyr M. Lisivka <vlisivka@gmail.com> 2011
#
#  This file is part of the Midnight Commander.
#
#  The Midnight Commander is free software; you can redistribute it
#  and/or modify it under the terms of the GNU General Public License as
#  published by the Free Software Foundation; either version 2 of the
#  License, or (at your option) any later version.
#
#  The Midnight Commander is distributed in the hope that it will be
#  useful, but WITHOUT ANY WARRANTY; without even the implied warranty
#  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.


# Modifications by steve8x8@googlemail.com, 2014--2015
# Use bash instead of sh (Debian has sh=dash),
# at least "read -a" is a bashism...
# Time stamps now correct to the second

# the following environment variables may be defined:
# $DEBUG
# $ADB

# Known bugs:
# - unable to set timestamp after write (mc doesn't provide one)
# - no mapping of UIDs and GIDs (unknown ones get set to current user's)
# - unreadable directories are shown as empty (or not at all)
# - no automatic detection whether "su" has to be used

# 2015-09-21: Merged some ideas from
#  https://raw.githubusercontent.com/init6/init_6/master/app-misc/mc/files/mc-4.8.13-adb-extfs-adb-plugin.patch
# 2022-07-21: Review for modern Android versions (tested with LOS 18.1, 14.1), drop busybox, escapes
# note: intentional messages to stderr will be shown at the end of an operation only, making them pointless :(

# start directory
START=/sdcard/Music
START=/sdcard
START=/
case $START in
  */)	;;
  *) START=${START}/
	;;
esac
# provide debugging output
# (1=only errors, 2=also file list, 3: original ls output)
DEBUG=${DEBUG:-3}
ERR=/dev/null
[ $DEBUG -ge 1 ] && ERR=${TMPDIR:-/tmp}/`basename "$0"`.err
OUT=/dev/null
[ $DEBUG -ge 2 ] && OUT=${TMPDIR:-/tmp}/`basename "$0"`.out
DBG=/dev/null
[ $DEBUG -ge 3 ] && DBG=${TMPDIR:-/tmp}/`basename "$0"`.dbg

errprint() {
  [ $DEBUG -ne 0 ] && \
  echo `date +%Y%m%d-%H%M%S:` "$@" >> $ERR
}


adb_list() {
  local DIR="$1"
#  [ -n "$DIR" ] || {
    DIR="/"
#  }
  errprint adb shell ls -alRn $DIR
  # redirect errors into list, or to /dev/null?
  "$ADB" shell "\
  find $DIR 2>/dev/null \
  | egrep -v '^/(acct|charger|d|dev|proc|sys)/' \
  | egrep -v '^/mnt/(androidwritable|installer|media_rw|pass_through|runtime|user)/' \
  | egrep -v '^/(storage)/' \
  | egrep -v '^/$' \
  | sort \
  | tr '\012' '\0' \
  | xargs -0 ls -ldn \
  " \
  | tr -d '\r' \
  | tee "$DBG" \
  | \
  {
    PREFIX="/"
    while read -ra ITEMS
    do
# possibly skip inaccessible stuff early
#false && \
      case "${ITEMS[*]}" in
        *'Permission denied'*)
          errprint DENY ${ITEMS[*]}
          continue
          ;;
      esac
# directory name can contain whitespace, don't probe for trailing colon
      case "${ITEMS[0]}" in
        # Dir entry:
        # /data/tombstones:
        '/'*)
# use full line to include whitespace
#          PREFIX="${ITEMS[0]%:}/" # Strip trailing ":", append '/'
          PREFIX="${ITEMS[*]:0}"
          PREFIX="${PREFIX%:}/" # Strip trailing ":", append '/'
          PREFIX="${PREFIX/\/\///}" # Replace '//' by '/'
          PREFIX="${PREFIX#/}" # Strip first "/"
        ;;

	# /sdcard/TitaniumBackup:
	# total 4488
	# -rw-rw---- 1 0 9997     564 2022-04-03 18:28 nodomain.freeyourgadget.gadgetbridge-20220403-162824.properties
	# -rw-rw---- 1 0 9997  616305 2022-04-03 18:28 nodomain.freeyourgadget.gadgetbridge-20220403-162824.tar.gz
	# -rw-rw---- 1 0 9997 3971406 2022-04-03 18:28 nodomain.freeyourgadget.gadgetbridge-e8eb4222da2f61147da49edab69564f4.apk.gz
	#     0      1 2  3      4         5       6     7
        # Dir
        # drwxrwx--x    1 1000     1000         2048 2020-10-10 00:04:55 data
        # File
        # -rwxr-x---    1 0        0          103208 1981-01-01 00:00:00 init
        # Symlink
        # lrwxrwxrwx    1 0        0              11 1999-12-31 15:02:45 etc -> /system/etc
        d[rwxst-]????????|-[rwxst-]????????|l[rwxst-]????????)
          PERMISSIONS="${ITEMS[0]}"
          LINKS="${ITEMS[1]}"
          OWNER="${ITEMS[2]}"
          GROUP="${ITEMS[3]}"
          SIZE="${ITEMS[4]}"
          YMD="${ITEMS[5]}"
          YEAR=`echo ${YMD} | cut -d- -f1`
          MONTH=`echo ${YMD} | cut -d- -f2`
          DAY=`echo ${YMD} | cut -d- -f3`
# get time at second precision?
          TIME="${ITEMS[6]}"
          FILE="${ITEMS[*]:7}"

# "cannot read link" errors may come in two lines:
# ls: /proc/1/cwd: cannot read link: Permission denied
# lrwxrwxrwx 1 root root 0 Sat Sep 19 13:34:01 2015 cwd
# this situation must be handled somewhere else (if at all?)
          case "$FILE" in
            # the following situation hasn't been observed by me [steve8x8]
            # lrwxrwxrwx    1 0        0               0 Fri May 13 09:13:22 2011 cwdls: /proc/1/cwd: cannot read link (not a symlink?)
            *': cannot read link (not a symlink?)')
              FILE="${FILE/ls: / -> }" # Replace ls: by ->
              errprint READ link $FILE
            ;;
            '.'|'..')
              continue # Skip '.' and '..' directory entries
            ;;
          esac

          case "$DAY" in
            [0-9]) DAY="0$DAY" ;;
          esac

          case "$MONTH" in
            [0-9]) MONTH="0$MONTH" ;;
            [0-9][0-9]) ;; # MONTH="$MONTH" ;;
            Jan) MONTH="01" ;;
            Feb) MONTH="02" ;;
            Mar) MONTH="03" ;;
            Apr) MONTH="04" ;;
            May) MONTH="05" ;;
            Jun) MONTH="06" ;;
            Jul) MONTH="07" ;;
            Aug) MONTH="08" ;;
            Sep) MONTH="09" ;;
            Oct) MONTH="10" ;;
            Nov) MONTH="11" ;;
            Dec) MONTH="12" ;;
            *) MONTH="01" ;;
          esac

          echo "$PERMISSIONS 1 $OWNER $GROUP $SIZE $MONTH-$DAY-$YEAR $TIME $PREFIX$FILE"
        ;;

        # Device
        # crw-rw----    1 1000     1005      10,  56 Thu May 12 15:02:45 2011 msm_pcm_in
        [cb][rwxst-]????????)
          PERMISSIONS="${ITEMS[0]}"
          LINKS="${ITEMS[1]}"
          OWNER="${ITEMS[2]}"
          GROUP="${ITEMS[3]}"
          MAJOR="${ITEMS[4]%,}" # Strip trailing ","
          MINOR="${ITEMS[5]}"
          YMD="${ITEMS[6]}"
          YEAR=`echo $YMD | cut -d- -f1`
          MONTH=`echo $YMD | cut -d- -f2`
          DAY=`echo $YMD | cut -d- -f3`
# get time at second precision?
          TIME="${ITEMS[7]}"
          FILE="${ITEMS[*]:8}"

          case "$DAY" in
            [0-9]) DAY="0$DAY" ;;
          esac

          case "$MONTH" in
            [0-9]) MONTH="0$MONTH" ;;
            [0-9][0-9]) ;; # MONTH="$MONTH" ;;
            Jan) MONTH="01" ;;
            Feb) MONTH="02" ;;
            Mar) MONTH="03" ;;
            Apr) MONTH="04" ;;
            May) MONTH="05" ;;
            Jun) MONTH="06" ;;
            Jul) MONTH="07" ;;
            Aug) MONTH="08" ;;
            Sep) MONTH="09" ;;
            Oct) MONTH="10" ;;
            Nov) MONTH="11" ;;
            Dec) MONTH="12" ;;
            *) MONTH="01" ;;
          esac

          echo "$PERMISSIONS 1 $OWNER $GROUP $MAJOR, $MINOR $MONTH-$DAY-$YEAR $TIME $PREFIX$FILE"
        ;;

        # Handling of errors - This may be incomplete or even wrong!
        # Insufficient permissions
        # ls: can't open '/data': Permission denied
        # Disappeared during access
        # ls: /proc/20931/task/20931/fd/3: cannot read link: No such file or directory
        # Caveat:
        # If we don't *ignore* forbidden stuff here, it will be dup in the file display!
        'ls:')
          case "${ITEMS[*]}" in
          *"can't open "*)
            WHY="${ITEMS[*]:4}"
            case "$WHY" in
            *'Permission denied')
#              echo "lrwxrwxrwx 1 0 0 0 01-01-1970 00:00:00 ${ITEMS[3]//[\':]/} -> FORBIDDEN ${WHY}"
              errprint DENY open ${ITEMS[3]//[\':]/} -\> ${ITEMS[*]}
              ;;
            *'No such file or directory')
#              echo "lrwxrwxrwx 1 0 0 0 01-01-1970 00:00:00 ${ITEMS[3]//[\':]/} -> GONE ${WHY}"
              errprint GONE open ${ITEMS[3]//[\':]/} -\> ${ITEMS[*]}
              ;;
            *)
              echo "lrwxrwxrwx 1 0 0 0 01-01-1970 00:00:00 ${ITEMS[3]//[\':]/} -> UNKNOWN ${WHY}"
              errprint UNKNOWN open ${ITEMS[3]//[\':]/} -\> ${ITEMS[*]}
              ;;
            esac
            ;;
          *'cannot read link'*)
            WHY="${ITEMS[*]:5}"
            case "$WHY" in
            *'Permission denied')
#              echo "lrwxrwxrwx 1 0 0 0 01-01-1970 00:00:00 ${ITEMS[1]//[\':]/} -> FORBIDDEN ${WHY}"
              errprint DENY link ${ITEMS[1]//[\':]/} -\> ${ITEMS[*]}
              ;;
            *'No such file or directory')
#              echo "lrwxrwxrwx 1 0 0 0 01-01-1970 00:00:00 ${ITEMS[1]//[\':]/} -> GONE ${WHY}"
              errprint GONE link ${ITEMS[1]//[\':]/} -\> ${ITEMS[*]}
              ;;
            *)
              echo "lrwxrwxrwx 1 0 0 0 01-01-1970 00:00:00 ${ITEMS[1]//[\':]/} -> UNKNOWN ${WHY}"
              errprint UNKNOWN link ${ITEMS[1]//[\':]/} -\> ${ITEMS[*]}
              ;;
            esac
            ;;
          *'Permission denied')
#            echo "lrwxrwxrwx 1 0 0 0 01-01-1970 00:00:00 ${ITEMS[1]//[\':]/} -> FORBIDDEN ${WHY}"
            errprint DENY ${ITEMS[1]//[\':]/} -\> ${ITEMS[*]}
            ;;
          *)
            errprint UNKNOWN ${ITEMS[*]}
            ;;
          esac
        ;;

        *)
          # Skip: empty lines and totals
        ;;
      esac
    done 
  } \
  | awk '{
    if($8 !~ "^(acct|charger|d|dev|proc|sys)/"){
      print;
    }
    }' \
  | tee $OUT
}

# from phone to $TMPDIR
adb_copyout() {
  FROM="$2"
  TO="$3"
  errprint adb pull -a /$FROM $TO
  $ADB pull -a "/$FROM" "$TO" >&2 ##&> /dev/null
  errprint returns $?
# we must leave this here since it may be viewed, edited, ... later
}

# from $TMPDIR to phone
adb_copyin() {
  TO="$2"
  FROM="$3"
  errprint adb push -a $FROM -\> /$TO
  $ADB push -a "$FROM" "/$TO" >&2 #&> /dev/null
  errprint returns $?
# we are *probably* safe to remove the temp file?
# temp file will be removed when vfs gets closed
# this may be too late?
  false && \
  case "$FROM" in
    ${TMPDIR}/extfs*)
      rm -f "$FROM"
      ;;
  esac
}

adb_mkdir() {
  DIR="$2"
  errprint adb shell mkdir -p /$DIR
  $ADB shell mkdir -p "/$DIR" >&2 #&> /dev/null
}

adb_rmdir() {
  DIR="$2"
  errprint adb shell rmdir /$DIR
  $ADB shell rmdir "/$DIR" >&2 #&> /dev/null
}

adb_rm() {
  FILE="$2"
  errprint adb shell rm -f /$FILE
  $ADB shell rm -f "/$FILE" >&2 #&> /dev/null
}

adb_cmd() {
  errprint adb shell $@
  $ADB shell "$@" >&@ #&> /dev/null
}

##### MAIN CODE STARTS HERE #####

# override any locale for dates
export LC_ALL=C

ADB="${ADB:-`which 2>/dev/null adb`}"
if [ -z "$ADB" ]; then
  echo "Error: could not find adb"
  exit 1
fi

ADB_STATE=`"$ADB" get-state | tail -n1`
# should return "device"
if [ "$ADB_STATE" != "device" ]; then
  "$ADB" kill-server > /dev/null 2>&1
  "$ADB" usb         > /dev/null 2>&1
fi
# should now return "device"
ADB_STATE=`"$ADB" get-state | tail -n1`
if [ "$ADB_STATE" != "device" ]; then
  echo "Error: adb cannot connect to device: $ADB_STATE"
  exit 1
fi
  "$ADB" usb         > /dev/null 2>&1
  "$ADB" root        > /dev/null 2>&1
  sleep 10

errprint CMD \""$@"\"
COMMAND="$1"
shift
case "$COMMAND" in
  # ToDo: detect root?
  list)    adb_list    "${1:-$START}" ;; # there is no argument for list!!!
  copyout) adb_copyout "$@" ;; # retval 1
  copyin)  adb_copyin  "$@" ;; # retval 1
  mkdir)   adb_mkdir   "$@" ;;
  rmdir)   adb_rmdir   "$@" ;;
  rm)      adb_rm      "$@" ;;
  *)       echo "Error: unknown command $@"; exit 1 ;;
esac
RETVAL=$?
errprint RET $RETVAL
#echo $COMMAND operation returned $RETVAL >&2

exit 0

Some notes about MC operations:
F2 - "Cannot execute commands on non-local filesystems"
F3 - file:
     copyout (to $TMPDIR), then view (showing path without leading /)
     directory:
     cd
F4 - file:
     copyout (to $TMPDIR), then edit
     on save, file gets saved to $TMPDIR + copyin, then
     Shift-F4! gets simulated, file already saved!
     reason: retval != 0?
     directory: no action
F5 - copy to $TMPDIR (not preserving timestamp), copyin from there
F6 - move to $TMPDIR (not preserving timestamp), copyin from there
     cannot rename locally
F7 - create (mkdir)
F8 - delete recursively if not empty (rm, rmdir)

cd adb://$tree will run a full "list" then change to $tree!
